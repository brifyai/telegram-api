{
  "name": "Telegram api Admin",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2320,
        60
      ],
      "id": "bbdca777-7401-4cb2-b373-0061944af09d",
      "name": "Webhook Trigger",
      "webhookId": "4ff9e888-43b0-41d7-8726-6b7d60274d1c"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.original.body.action }}",
              "value2": "=query"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1540,
        80
      ],
      "id": "a2ea9288-8466-4810-a3e5-d935eb4bdf6c",
      "name": "If (Query or Document)"
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        220,
        -160
      ],
      "id": "4a683caa-09e6-4c58-99c1-cd7196bba23d",
      "name": "Telegram Response",
      "webhookId": "52ef0ad7-95c8-43e7-8cc1-0e0d6a3c3abf",
      "credentials": {
        "telegramApi": {
          "id": "F6RzDj0qZKFJhvYm",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Edit Fields').item.json.telegramId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -600,
        120
      ],
      "id": "9f45763e-18cb-484d-bf4d-a06759b34356",
      "name": "Memory"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.action }}",
              "rightValue": "=query",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1360,
        -40
      ],
      "id": "0eaf8d9a-794e-4cfb-a5aa-d07e37847a8b",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "882e95f2-3883-407b-8885-327cd6ddb771",
              "name": "telegramId",
              "value": "={{$json.body.telegram_id}}",
              "type": "string"
            },
            {
              "id": "5a8ea78c-9fc9-4373-8a18-561c3699345c",
              "name": "question",
              "value": "={{ $json.original.body.question }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1780,
        60
      ],
      "id": "0e1eff4d-10ac-47bf-8f0d-79a995f5bd36",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.original.body.action }}",
              "rightValue": "=process_image",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1340,
        360
      ],
      "id": "5c83cfee-0927-4ec8-9104-1363d249b29a",
      "name": "If Image"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -900,
        160
      ],
      "id": "b1a4c6c9-bbee-4ef8-a709-2675319f768b",
      "name": "Extracto1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.original.body.action }}",
              "rightValue": "=process_document",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1360,
        100
      ],
      "id": "e8df9b04-a9a4-431a-a766-6906e40a9871",
      "name": "documentoful"
    },
    {
      "parameters": {
        "url": "={{ $json.original.body.file_path }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1080,
        20
      ],
      "id": "f430eb70-4498-4325-ba7e-ffb1d0f976d2",
      "name": "nono_descarga",
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "HcSQeZ8R6aCG7Arl",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "={{ $json.mensajeia }}",
        "options": {
          "systemMessage": "=**INSTRUCCIÓN CRÍTICA: Para CUALQUIER pregunta sobre leyes, DEBES usar la herramienta HTTP Request1 antes de responder. Es OBLIGATORIO.**\n\nEres un asistente legal experto en la legislación de Chile. Tu ÚNICA función es buscar leyes usando la herramienta HTTP Request disponible.\n\n**Contexto del Documento:**\n`Contexto: {{ $json.text || $json.context || 'No hay contexto específico disponible' }}`\n\n**REGLAS OBLIGATORIAS:**\n\n1. **SIEMPRE USA LA HERRAMIENTA:** Para CUALQUIER pregunta sobre leyes, decretos, códigos o términos legales, DEBES usar la herramienta HTTP Request. NO respondas sin usarla.\n\n2. **Detección automática:** Si el usuario menciona palabras como:\n   - \"ley\", \"decreto\", \"código\", \"artículo\"\n   - \"busca\", \"encuentra\", \"dame\", \"muestra\"\n   - Cualquier término legal específico\n   → USA LA HERRAMIENTA INMEDIATAMENTE\n\n3. **Parámetros de la herramienta:**\n   - **opt**: Usa \"61\" si el usuario pide cantidad específica (ej: \"5 leyes\"), sino usa \"60\"\n   - **cadena**: Extrae el término de búsqueda de la pregunta + contexto\n   - **cantidad**: Solo si el usuario especifica número (ej: \"5\", \"10\")\n\n4. **Ejemplos que REQUIEREN herramienta:**\n   - \"Dame 5 leyes sobre campesinos\" → opt=61, cadena=campesinos, cantidad=5\n   - \"Busca ley de arriendo\" → opt=60, cadena=ley de arriendo\n   - \"Qué dice sobre derechos de agua\" → opt=60, cadena=derechos de agua\n\n5. **Formato de respuesta:** Nunca muestres XML. Presenta resultados en formato amigable.\n\n**Ejemplos de flujo:**\n\n**Ejemplo 1 (Sin Contexto):**\n- Usuario: \"Hola, me gustaría saber sobre la ley de arriendo, los 3 artículos más importantes\"\n- Tu pensamiento: \"Ok, no hay contexto. El `terminoBusqueda` es 'ley de arriendo'. El usuario pide 3 resultados, así que `cantidadResultados` es 3 y `opcionBusqueda` es '61'.\"\n- Tú usas la herramienta, recibes el XML, lo lees y respondes con el resumen.\n\n**Ejemplo 2 (Con Contexto):**\n- Contexto del Documento: \"El presente informe analiza la escasez hídrica y los derechos de aprovechamiento de aguas para la agricultura...\"\n- Usuario: \"Encuéntrame 2 leyes relacionadas con esto.\"\n- Tu pensamiento: \"Ok, el usuario dice 'esto'. Reviso el `Contexto`. Habla de 'derechos de aprovechamiento de aguas para la agricultura'. Ese es mi `terminoBusqueda`. El usuario pide 2 resultados, así que `cantidadResultados` es 2 y `opcionBusqueda` es '61'.\"\n- Tú usas la herramienta, recibes el XML, lo lees y respondes con el resumen.\n\n\n**IMPORTANTE:** Si no usas la herramienta cuando debes, estás fallando en tu función principal.\n**FLUJO OBLIGATORIO:**\n1. Usuario hace pregunta legal → USAR HERRAMIENTA\n2. Recibir XML → Procesar información\n3. Responder en formato amigable\n\n**NUNCA respondas sobre leyes sin usar la herramienta HTTP Request1 primero.**\n\n**Frases que SIEMPRE activan la herramienta:**\n- \"Dame X leyes sobre...\"\n- \"Busca información sobre...\"\n- \"Qué dice la ley sobre...\"\n- \"Encuentra decretos de...\"\n- Cualquier mención de términos legales específicos"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -760,
        -140
      ],
      "id": "d2806862-979c-4b27-b196-801124252359",
      "name": "AI Agent1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -740,
        40
      ],
      "id": "01e728e0-79c9-4994-b83b-c2b55d26c0d2",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "1TR7z1BBTyDQE4w2",
          "name": "DeepSeek account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "711cd063-26fe-4622-8165-b698b529210e",
              "name": "mensajeia",
              "value": "={{ $json.content || $('Edit Fields').item.json.original.body.question }}",
              "type": "string"
            },
            {
              "id": "1a4403cc-b2b7-49a0-927f-ad197e106136",
              "name": "text",
              "value": "={{$json.text || $json.candidates[0].content.parts[0].text}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1060,
        -140
      ],
      "id": "daa11508-220d-43d4-b4cb-36f4d17ff63b",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "toolDescription": "Utiliza esta herramienta para buscar leyes, decretos o cualquier término en la base de datos oficial de Ley Chile. Es la mejor opción para responder preguntas sobre la legislación chilena.",
        "url": "https://www.leychile.cl/Consulta/obtxml",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "opt",
              "valueProvider": "fieldValue",
              "value": "={{ $json.opcionBusqueda }}"
            },
            {
              "name": "cadena",
              "valueProvider": "fieldValue",
              "value": "={{ $json.terminoBusqueda }}"
            },
            {
              "name": "cantidad",
              "valueProvider": "fieldValue",
              "value": "={{ $json.cantidadResultados }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -440,
        0
      ],
      "id": "191420cf-30ec-4362-b39f-015e0d3daeb6",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "url": "={{ $json.original.body.file_path }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        400
      ],
      "id": "9b18c2cb-6bb9-44ad-9965-5fcbff493cfb",
      "name": "descarga_imagen",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Describe detalladamente todo lo que ves en esta imagen. Extrae literalmente cualquier texto visible, identifica objetos, personas, vehículos, edificios, señales, documentos, y cualquier elemento relevante. Si hay contenido legal (leyes, artículos, decretos), menciona los números y referencias exactas que aparecen. Proporciona solo hechos observables, sin hacer suposiciones ni solicitar información adicional. Sé descriptivo y exhaustivo en tu análisis visual.\"\n        },\n        {\n          \"inline_data\": {\n            \"mime_type\": \"image/jpeg\",\n            \"data\": \"{{ $('Move64').first().json.data }}\"\n          }\n        }\n      ]\n    }\n  ]\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        400
      ],
      "id": "77460722-d8e1-410a-8f26-25aef80a2f25",
      "name": "HTTP Request",
      "credentials": {
        "googlePalmApi": {
          "id": "4159LyeN028ihYUR",
          "name": "Telegram Gemini api"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -860,
        400
      ],
      "id": "adb56949-2474-48fb-8c05-2670c04519d0",
      "name": "Move64"
    },
    {
      "parameters": {
        "jsCode": "// Normalizar los datos de entrada y detectar tipo de mensaje\nconst inputData = $input.item.json;\n\n// Determinar el tipo de mensaje\nlet messageType = \"text\";\nlet content = \"\";\n\n// Verificar si es una imagen\nif (inputData.message && inputData.message.photo) {\n  messageType = \"image\";\n  // Obtener el file_id de la imagen (la última es la de mayor resolución)\n  const photos = inputData.message.photo;\n  content = photos[photos.length - 1].file_id;\n}\n// Verificar si es un documento\nelse if (inputData.message && inputData.message.document) {\n  messageType = \"document\";\n  content = inputData.message.document.file_id;\n}\n// Si es texto\nelse if (inputData.message && inputData.message.text) {\n  content = inputData.message.text;\n}\n// Si viene de tu webhook personalizado\nelse if (inputData.body && inputData.body.text) {\n  content = inputData.body.text;\n}\n\n// Asegurarse de que telegram_id existe\nlet telegram_id = null;\nif (inputData.body && inputData.body.telegram_id) {\n  telegram_id = inputData.body.telegram_id;\n} else if (inputData.message && inputData.message.from) {\n  telegram_id = inputData.message.from.id;\n}\n\n// Determinar la acción\nlet action = \"query\";\nif (messageType === \"document\") {\n  action = \"document_added\";\n} else if (messageType === \"image\") {\n  action = \"image_added\";\n} else if (inputData.action) {\n  action = inputData.action;\n}\n\nreturn { \n  json: {\n    messageType,\n    content,\n    telegram_id,\n    action,\n    body: {\n      telegram_id,\n      text: content,\n      type: messageType,\n      action\n    },\n    original: inputData\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2180,
        60
      ],
      "id": "635d43e3-57f3-4e32-9a4e-0cd62f8e8f77",
      "name": "Code"
    }
  ],
  "pinData": {
    "Webhook Trigger": [
      {
        "json": {
          "headers": {
            "host": "n8n-master.captain.aintelligence.cl",
            "x-real-ip": "201.215.127.161",
            "x-forwarded-for": "201.215.127.161",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "469",
            "user-agent": "python-requests/2.32.3",
            "accept-encoding": "gzip, deflate",
            "accept": "*/*",
            "content-type": "application/json"
          },
          "params": {},
          "query": {},
          "body": {
            "telegram_id": 1151207547,
            "action": "process_image",
            "document_id": "948654bd-a851-4fe1-a379-5e0f82176cb4",
            "group_id": "e7dcfc0f-4c3d-4e1b-940f-cb48a3872caf",
            "file_path": "https://leoyybfbnjajkktprhro.supabase.co/storage/v1/object/public/telegrambucket/groups/e7dcfc0f-4c3d-4e1b-940f-cb48a3872caf/Kaksieiwiasn.jpg",
            "filename": "Kaksieiwiasn.jpg",
            "custom_name": "Kaksieiwiasn",
            "content_type": "image",
            "question": "Está la camioneta infringiendo alguna ley"
          },
          "webhookUrl": "https://n8n-master.captain.aintelligence.cl/webhook/telegram",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If (Query or Document)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "documentoful",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If (Query or Document)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Image": {
      "main": [
        [
          {
            "node": "descarga_imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracto1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "documentoful": {
      "main": [
        [
          {
            "node": "nono_descarga",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "nono_descarga": {
      "main": [
        [
          {
            "node": "Extracto1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "descarga_imagen": {
      "main": [
        [
          {
            "node": "Move64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move64": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e1b65e1e-6ef2-4ff8-8465-4c3fcf987506",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a502742c5a027e62d4303a7e7a933c28de972b345bde35a45c53680990fc04b8"
  },
  "id": "FEvO0VGbMtyydh8Z",
  "tags": []
}
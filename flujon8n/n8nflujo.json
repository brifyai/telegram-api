{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2020,
        540
      ],
      "id": "3561fe88-4fca-43e2-877b-9d95852d52d4",
      "name": "Webhook Trigger",
      "webhookId": "4ff9e888-43b0-41d7-8726-6b7d60274d1c"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.original.body.action }}",
              "value2": "=query"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1380,
        540
      ],
      "id": "1d7c5c40-42ae-44e8-8987-bbb8e9725799",
      "name": "If (Query or Document)"
    },
    {
      "parameters": {
        "functionCode": "// Preparar el contexto para el agente de IA\n\n// Inicializar variables\nconst itemsArray = $input.all() || [];\nlet telegram_id = null;\nlet content = \"\";\nlet action = \"query\";\n\n// Obtener el telegram_id del input original\nif (itemsArray && itemsArray.length > 0 && itemsArray[0].json) {\n  // Intentar obtener telegram_id de diferentes ubicaciones posibles\n  if (itemsArray[0].json.telegram_id) {\n    telegram_id = itemsArray[0].json.telegram_id;\n  } else if (itemsArray[0].json.body && itemsArray[0].json.body.telegram_id) {\n    telegram_id = itemsArray[0].json.body.telegram_id;\n  }\n  \n  // Determinar la acción\n  if (itemsArray[0].json.action) {\n    action = itemsArray[0].json.action;\n  }\n}\n\n// Preparar el contexto según el tipo de entrada\nif (action === \"document_added\" || action === \"image_added\") {\n  // Si acabamos de procesar un documento o imagen\n  if (itemsArray[0].json.content) {\n    content = `Contenido extraído de ${itemsArray[0].json.type === \"document\" ? \"documento\" : \"imagen\"}: ${itemsArray[0].json.filename}\\n\\n${itemsArray[0].json.content}`;\n  }\n  \n  return {\n    context: content,\n    query: `Por favor, resume la información principal de este ${itemsArray[0].json.type === \"document\" ? \"documento\" : \"imagen\"}.`,\n    telegram_id: telegram_id,\n    action: action\n  };\n} else {\n  // Si es una consulta normal, mantener el comportamiento original\n  // Obtener documentos si existen\n  let documents = [];\n  if (itemsArray && itemsArray.length > 0 && itemsArray[0].json) {\n    // NUEVO: Verificar si hay documentos en el campo documents\n    if (itemsArray[0].json.documents && Array.isArray(itemsArray[0].json.documents)) {\n      documents = itemsArray[0].json.documents;\n      console.log(\"Documentos encontrados en el campo documents:\", documents.length);\n    }\n    // Si hay un array de documentos, usarlo\n    else if (Array.isArray(itemsArray[0].json)) {\n      documents = itemsArray[0].json;\n    }\n    // Si es un objeto con propiedades de documento, convertirlo en array\n    else if (itemsArray[0].json.filename && itemsArray[0].json.content) {\n      documents = [itemsArray[0].json];\n    }\n    // Si es un resultado de búsqueda vectorial\n    else if (itemsArray[0].json.data && Array.isArray(itemsArray[0].json.data)) {\n      documents = itemsArray[0].json.data;\n    }\n  }\n\n  // NUEVO: Verificar si hay un documento seleccionado específicamente\n  const hasSelectedContext = itemsArray[0].json.has_selected_context === true;\n\n  // Preparar el contexto\n  let context = \"\";\n\n  // Si hay documentos, procesarlos\n  if (documents.length > 0) {\n    // Si hay un documento seleccionado, usar solo ese\n    const docsToUse = hasSelectedContext ? documents.slice(0, 1) : documents.slice(0, 5);\n    \n    // Construir el contexto con los documentos\n    docsToUse.forEach(doc => {\n      if (doc && doc.content) {\n        const filename = doc.filename || doc.title || doc.name || \"Documento\";\n        context += `Documento: ${filename}\\n${doc.content}\\n\\n`;\n      }\n    });\n    \n    // Si hay un documento seleccionado, agregar una nota\n    if (hasSelectedContext) {\n      const docName = documents[0].filename || documents[0].title || documents[0].name || \"seleccionado\";\n      context = `[Usando documento seleccionado: ${docName}]\\n\\n${context}`;\n    }\n  } else {\n    context = \"No hay documentos disponibles para proporcionar contexto.\";\n  }\n\n  // Obtener el texto de la consulta\n  let queryText = \"\";\n  if (itemsArray && itemsArray.length > 0 && itemsArray[0].json) {\n    if (itemsArray[0].json.content) {\n      queryText = itemsArray[0].json.content;\n    } else if (itemsArray[0].json.body && itemsArray[0].json.body.text) {\n      queryText = itemsArray[0].json.body.text;\n    } else if (itemsArray[0].json.text) {\n      queryText = itemsArray[0].json.text;\n    } else if (itemsArray[0].json.query) {\n      queryText = itemsArray[0].json.query;\n    }\n  }\n\n  // Devolver el contexto preparado con telegram_id preservado\n  return {\n    context: context,\n    query: queryText || \"\",\n    telegram_id: telegram_id,\n    action: action,\n    has_selected_context: hasSelectedContext\n  };\n}"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -300,
        440
      ],
      "id": "28458865-e60f-4ccb-a12f-78a8d4c6e51d",
      "name": "Prepare Context"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.query}}",
        "options": {
          "systemMessage": "=Eres un asistente de IA que ayuda a responder preguntas.\n{% if $json.context %}\nUtiliza el siguiente contexto para responder a la consulta del usuario:\n{{ $json.context }}\n{% else %}\nResponde basándote en tu conocimiento general.\n{% endif %}\n\nConsulta del usuario: {{ $json.text || $json.query }}\n\nIMPORTANTE: Omite la generaciónde json a menos que el usuario te lo solicite."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -40,
        400
      ],
      "id": "edd2e14d-67a9-4eaf-98f1-ae828c085a95",
      "name": "AI Agent",
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        260,
        400
      ],
      "id": "fd46ed1e-1512-47f8-83d1-53b73d13a360",
      "name": "Telegram Response",
      "webhookId": "52ef0ad7-95c8-43e7-8cc1-0e0d6a3c3abf",
      "credentials": {
        "telegramApi": {
          "id": "bYlaNU9AutFJPON3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "6e15a3c1-25cd-4aad-acad-230226f9182f",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "H0VrUt2Qtc1hGNfr",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Edit Fields').item.json.telegramId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        60,
        600
      ],
      "id": "600221b6-7fe4-4822-ac8f-af1e62b8d8a4",
      "name": "Memory"
    },
    {
      "parameters": {
        "jsCode": "// Normalizar los datos de entrada y detectar tipo de mensaje\nconst inputData = $input.item.json;\n\n// Determinar el tipo de mensaje\nlet messageType = \"text\";\nlet content = \"\";\n\n// Verificar si es una imagen\nif (inputData.message && inputData.message.photo) {\n  messageType = \"image\";\n  // Obtener el file_id de la imagen (la última es la de mayor resolución)\n  const photos = inputData.message.photo;\n  content = photos[photos.length - 1].file_id;\n}\n// Verificar si es un documento\nelse if (inputData.message && inputData.message.document) {\n  messageType = \"document\";\n  content = inputData.message.document.file_id;\n}\n// Si es texto\nelse if (inputData.message && inputData.message.text) {\n  content = inputData.message.text;\n}\n// Si viene de tu webhook personalizado\nelse if (inputData.body && inputData.body.text) {\n  content = inputData.body.text;\n}\n\n// Asegurarse de que telegram_id existe\nlet telegram_id = null;\nif (inputData.body && inputData.body.telegram_id) {\n  telegram_id = inputData.body.telegram_id;\n} else if (inputData.message && inputData.message.from) {\n  telegram_id = inputData.message.from.id;\n}\n\n// Determinar la acción\nlet action = \"query\";\nif (messageType === \"document\") {\n  action = \"document_added\";\n} else if (messageType === \"image\") {\n  action = \"image_added\";\n} else if (inputData.action) {\n  action = inputData.action;\n}\n\nreturn { \n  json: {\n    messageType,\n    content,\n    telegram_id,\n    action,\n    body: {\n      telegram_id,\n      text: content,\n      type: messageType,\n      action\n    },\n    original: inputData\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1860,
        520
      ],
      "id": "8ceb3a42-2251-4c2b-99ef-b02b94cf6c0b",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.action }}",
              "rightValue": "=query",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1180,
        300
      ],
      "id": "8763dd6d-fb6c-4609-8de7-65b90d2c2810",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "882e95f2-3883-407b-8885-327cd6ddb771",
              "name": "telegramId",
              "value": "={{$json.body.telegram_id}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1620,
        520
      ],
      "id": "989d3fe7-5be9-4229-a211-f49246ed75a2",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.original.body.action }}",
              "rightValue": "=document_added",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1180,
        840
      ],
      "id": "52f42371-72f0-4a1d-9ad0-91c503dfeccc",
      "name": "If Document"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1e28091-70a2-45f2-ac7e-347ea648f6f7",
              "leftValue": "={{ $json.original.body.action }}",
              "rightValue": "=image_added",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1160,
        1120
      ],
      "id": "e37e5363-7e3a-4478-84d7-e41e711e56eb",
      "name": "If Image"
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramId }}",
        "text": "{{ $json.body.text}}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -960,
        840
      ],
      "id": "fee87e1c-3dfd-46ec-b61f-809128adbfb7",
      "name": "Download Document",
      "webhookId": "4510ff94-c9e1-40a4-a83b-4cd42baa16cb",
      "credentials": {
        "telegramApi": {
          "id": "bYlaNU9AutFJPON3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Edit Fields').item.json.telegramId }}",
        "text": "={{ $json.body.text}}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -960,
        1040
      ],
      "id": "fd3cad05-245b-44e8-bf77-d75127f9cc4b",
      "name": "Download Image",
      "webhookId": "4510ff94-c9e1-40a4-a83b-4cd42baa16cc",
      "credentials": {
        "telegramApi": {
          "id": "bYlaNU9AutFJPON3",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.item.json;\nlet documentContent = \"\";\nlet documentName = \"\";\n\nif (inputData.fileName) {\n  documentName = inputData.fileName;\n}\n\nif (inputData.fileContent) {\n  // Si es un PDF, usar una biblioteca de extracción de texto\n  // En un entorno real, necesitarías instalar pdfjs-dist u otra biblioteca\n  // Este es un ejemplo conceptual\n  if (documentName.toLowerCase().endsWith('.pdf')) {\n    // Aquí iría el código para extraer texto del PDF\n    documentContent = \"[Texto extraído del PDF]\";\n  } else {\n    // Para otros tipos de documentos, intentar convertir a texto\n    documentContent = inputData.fileContent.toString('utf-8');\n  }\n}\n\nreturn {\n  json: {\n    filename: documentName,\n    content: documentContent,\n    telegram_id: inputData.telegram_id || inputData.body.telegram_id,\n    type: \"document\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        840
      ],
      "id": "ce983558-06e4-4a86-95be-30b5a83e8ad5",
      "name": "Extract Document Text"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.item.json;\nlet imageContent = \"\";\nlet imageName = \"imagen_\" + Date.now() + \".jpg\";\n\nif (inputData.fileName) {\n  imageName = inputData.fileName;\n}\n\n// En un entorno real, aquí conectarías con un servicio de OCR como:\n// - Tesseract.js (librería local)\n// - Google Cloud Vision API\n// - Microsoft Azure Computer Vision\n// - Amazon Textract\n\n// Ejemplo conceptual (en producción necesitarías implementar la llamada real al API)\nimageContent = \"[Aquí iría el texto extraído de la imagen por OCR]\";\n\nreturn {\n  json: {\n    filename: imageName,\n    content: imageContent,\n    telegram_id: inputData.telegram_id || inputData.body.telegram_id,\n    type: \"image\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        1040
      ],
      "id": "0ca5b54b-0cbb-4d51-81f2-8eb52bc582ac",
      "name": "Extract Image Text (OCR)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://leoyybfbnjajkktprhro.supabase.co/rest/v1/documents",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.content }}"
            },
            {
              "name": "filename",
              "value": "={{ $json.filename }}"
            },
            {
              "name": "user_id",
              "value": "={{ $json.telegram_id }}"
            },
            {
              "name": "type",
              "value": "={{ $json.type }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -600,
        620
      ],
      "id": "9706c008-c69c-4fb6-8487-5d0ea1237fb6",
      "name": "Save to Supabase",
      "credentials": {
        "httpHeaderAuth": {
          "id": "EU4fxUCFfAPGmWGz",
          "name": "Header Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.body.telegram_id }}",
        "text": "Tu documento ha sido añadido correctamente. Ahora puedes hacer preguntas sobre él.",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -300,
        840
      ],
      "id": "111690ab-e6af-4fdc-839b-afc7e98c0809",
      "name": "Telegram Confirmation",
      "webhookId": "4510ff94-c9e1-40a4-a83b-4cd42baa16ca",
      "credentials": {
        "telegramApi": {
          "id": "bYlaNU9AutFJPON3",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook Trigger": [
      {
        "json": {
          "name": "First item",
          "code": 1
        }
      },
      {
        "json": {
          "name": "Second item",
          "code": 2
        }
      }
    ]
  },
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If (Query or Document)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Context": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Prepare Context",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If (Query or Document)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Document": {
      "main": [
        [
          {
            "node": "Download Document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Image": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Document": {
      "main": [
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Extract Image Text (OCR)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Image Text (OCR)": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Supabase": {
      "main": [
        [
          {
            "node": "Telegram Confirmation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cf13cd23-0978-4eb8-9dbf-d7a65c3c7ead",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09174c4bf7cfdf5b1a0e8253eb8fbbda0b3ca78cea61811605f595962383e581"
  },
  "id": "37x3tx551xJhrazt",
  "tags": []
}